# 1. Ensure Infrastructure
# 2. Build and Push Image
# 3. Deploy Application

trigger: none
#- master

resources:
- repo: self

variables:
  appName: 'aksdemo' 
  location: 'australiaeast'
  svcConnAzureRm: 'Keith Patton - VS Professional Sub'
  uniqueSuffix: 'qpe'
  acrName: 'acr$(appName)$(uniqueSuffix)'
  imageName: 'aksworkloadidentitysampleapi'
  imageTag: '$(Build.BuildId)'
  rgName: 'rg-$(appName)'
  rgAksNodesName: 'rg-k8s-$(appName)'
  aksName: 'aks-$(appName)'
  aksWorkloadIdentityServiceAccountName: 'sa-workload-identity-$(appName)'
  aksNamespace: 'default'
  aksFederatedIdentityName: 'fic-$(aksName)'
  aksWorkloadIdentityName: 'aks-$(appName)'
  aksWorkloadIdentityClientId: '{dynamic}'
  aksNodeCount: 1
  aksVmSize: 'Standard_B2s'
  helmReleaseName: 'aks-sample'
  helmChartVersion: '0.5.0'
  kvName: 'kv-$(appName)-$(uniqueSuffix)'
  tfStateResourceGroup: 'rg-terraform'
  tfStateStorageAccount: 'terraformstateakssample'
  tfStateContainerName: 'tfstate'
  tfStateFileName: 'terraform.tfstate'

stages:
- stage: Infrastructure
  displayName: Ensure Infrastructure
  jobs:
  - job: Terraform
    displayName: Terraform Azure Resources
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: TerraformTaskV3@3
      displayName: Terraform Init 
      inputs:
        provider: 'azurerm'
        backendServiceArm: $(svcConnAzureRm)
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/Devops/Infrastructure'
        backendAzureRmResourceGroupName: $(tfStateResourceGroup)
        backendAzureRmStorageAccountName: $(tfStateStorageAccount)
        backendAzureRmContainerName: $(tfStateContainerName)
        backendAzureRmKey: $(tfStateFileName)
    - task: TerraformTaskV3@3
      displayName: Terraform Apply
      inputs:
        provider: 'azurerm'
        environmentServiceNameAzureRM: $(svcConnAzureRm)
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/Devops/Infrastructure'
        commandOptions: 
          --auto-approve
          -var rg_name=$(rgName)
          -var rg_aks_nodes_name=$(rgAksNodesName)
          -var location=$(location)
          -var acr_name=$(acrName)
          -var aks_name=$(aksName)
          -var aks_workload_identity_name=$(aksWorkloadIdentityName)
          -var aks_federated_identity_name=$(aksFederatedIdentityName)
          -var aks_namespace=$(aksNamespace)
          -var aks_workload_identity_service_account_name=$(aksWorkloadIdentityServiceAccountName)
          -var aks_vm_size=$(aksVmSize)
          -var aks_node_count=$(aksNodeCount)
          -var kv_name=$(kvName)      
        backendAzureRmResourceGroupName: $(tfStateResourceGroup)
        backendAzureRmStorageAccountName: $(tfStateStorageAccount)
        backendAzureRmContainerName: $(tfStateContainerName)
        backendAzureRmKey: $(tfStateFileName)
- stage: Image
  displayName: Build and Push Image
  jobs:
  - job: BuildAndPush
    displayName: Build and Push Image
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: Docker@2
      displayName: Build Image
      inputs:
        command: build
        repository: $(imageName)
        dockerfile: '$(Build.SourcesDirectory)/AksWorkloadIdentitySample.Api/Dockerfile'
        buildContext: '$(Build.SourcesDirectory)'
        tags: $(imageTag)
    - task: AzureCLI@2
      displayName: 'Push Image'
      inputs:
        azureSubscription: $(svcConnAzureRm)
        scriptType: 'pscore'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az acr login --name $(acrName)
          docker tag $(imageName):$(imageTag) $(acrName).azurecr.io/$(imageName):$(imageTag)
          docker push $(acrName).azurecr.io/$(imageName):$(imageTag)
- stage: Deploy
  displayName: Deploy Application
  jobs:
  - job: Deploy
    displayName: Deploy Application
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: AzureCLI@2
      displayName: 'Get Azure Resource Values'
      inputs:
        azureSubscription: $(svcConnAzureRm)
        scriptType: 'pscore'
        scriptLocation: 'inlineScript'
        inlineScript: |
          $aksWorkloadIdentityClientId = (az identity show --resource-group $(rgName) --name $(aksWorkloadIdentityName) --query 'clientId' -otsv)
          Write-Output("##vso[task.setvariable variable=aksWorkloadIdentityClientId;]$aksWorkloadIdentityClientId")
    - task: HelmDeploy@0
      displayName: 'Deploy Helm Chart'
      inputs:
        connectionType: 'Azure Resource Manager'
        azureSubscription: $(svcConnAzureRm)
        azureResourceGroup: $(rgName)
        kubernetesCluster: $(aksName)
        namespace: $(aksNamespace)
        command: 'upgrade'
        chartType: 'FilePath'
        chartPath: '$(System.DefaultWorkingDirectory)/Devops/Deploy/aks-sample'
        chartVersion: $(helmChartVersion)
        releaseName: $(helmReleaseName)
        overrideValues: |
          imageTag=$(imageTag)
          aksNamespace=$(aksNamespace)
          workloadIdentityServiceAccountName=$(aksWorkloadIdentityServiceAccountName)
          keyVaultName=$(kvName)
          azureContainerRegistryName=$(acrName)
          workloadIdentityClientId=$(aksWorkloadIdentityClientId)
        arguments: '--atomic'