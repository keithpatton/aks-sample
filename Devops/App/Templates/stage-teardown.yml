parameters:
- name: svcConnAzureRm
  type: string  
- name: tenants
  type: object  
- name: region
  type: string
- name: env
  type: string
- name: dependsOn  
  type: object

stages:
- stage: ${{ parameters.region }}_${{ parameters.env }}
  displayName: ${{ parameters.region }}_${{ parameters.env }}
  variables: 
    - template: ../../Common/Templates/variables/reg-env.yml 
      parameters:
        region: ${{ parameters.region }}
        env: ${{ parameters.env }}  
    - template: variables/reg-env.yml 
      parameters:
        region: ${{ parameters.region }}
        env: ${{ parameters.env }}  
  dependsOn: ${{ parameters.dependsOn }}
  pool:
    vmImage: ubuntu-latest 
  jobs:

 - deployment: Uninstall    
    displayName: Uninstall App Helm Release
    environment: ${{ parameters.region }}_${{ parameters.env }}
    strategy:
      runOnce:
        deploy:
          steps:
          - task: HelmDeploy@0
            displayName: 'Uninstall $(appName)'
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscription: ${{ parameters.svcConnAzureRm}}
              azureResourceGroup: $(rgName)
              kubernetesCluster: $(aksName)
              command: 'uninstall'
              namespace: $(helmReleaseNamespace)
              releaseName: $(helmReleaseName)
              arguments: '--debug'
  - deployment: Infrastructure    
    dependsOn: Uninstall
    displayName: Destroy App Specific Infra
    environment: ${{ parameters.region }}_${{ parameters.env }}
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
            clean: true   
          - template:  ../../Common/Templates/stageTenantsVarStep.yml        
            parameters:
              tenants: ${{ parameters.tenants }}
              region: ${{ parameters.region }}
              env: ${{ parameters.env }}                   
          - task: replacetokens@5
            displayName: 'Replace tokens with variables'
            inputs:
              targetFiles: |
                Devops/App/Terraform/**/variables.tf
              encoding: 'auto'
              tokenPattern: 'default'
              writeBOM: true
              actionOnMissing: 'warn'
              keepToken: false
              actionOnNoFiles: 'warn'
              enableTransforms: false
              enableRecursion: false
              useLegacyPattern: false
              enableTelemetry: true   
              verbosity: 'detailed'         
          - task: AzureCLI@2
            displayName: 'Ensure Build Agent Sql Access'
            continueOnError: true
            inputs:
              azureSubscription: ${{ parameters.svcConnAzureRm}}
              addSpnToEnvironment: true
              scriptType: bash
              scriptLocation: 'inlineScript'
              inlineScript: |
                build_agent_ip=$(curl https://ipv4.icanhazip.com/)
                az sql server firewall-rule create -g $(rgName) --name "$(sqlFirewallRuleBuildAgentName)-pipeline" --server $(sqlServerName) --start-ip-address $build_agent_ip --end-ip-address $build_agent_ip              
          - task: TerraformTaskV3@3
            displayName: Terraform Init 
            inputs:
              provider: 'azurerm'
              backendServiceArm: ${{ parameters.svcConnAzureRm}}
              command: 'init'
              workingDirectory: '$(System.DefaultWorkingDirectory)/Devops/App/Terraform'
              backendAzureRmResourceGroupName: $(tfStateResourceGroup)
              backendAzureRmStorageAccountName: $(tfStateStorageAccount)
              backendAzureRmContainerName: $(tfStateContainerName)
              backendAzureRmKey: $(tfStateFileName)
          - task: TerraformTaskV3@3
            displayName: Terraform Destroy
            inputs:
              provider: 'azurerm'
              environmentServiceNameAzureRM: ${{ parameters.svcConnAzureRm}}
              command: 'destroy'
              workingDirectory: '$(System.DefaultWorkingDirectory)/Devops/App/Terraform'
              commandOptions: '--auto-approve'
              backendAzureRmResourceGroupName: $(tfStateResourceGroup)
              backendAzureRmStorageAccountName: $(tfStateStorageAccount)
              backendAzureRmContainerName: $(tfStateContainerName)
              backendAzureRmKey: $(tfStateFileName)                              