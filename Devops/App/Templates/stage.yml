parameters:
- name: svcConnAzureRm
  type: string  
- name: tenants
  type: object  
- name: region
  type: string
- name: env
  type: string
- name: dependsOn  
  type: object
- name: rings
  type: object   
- name: imageBuild
  type: boolean
- name: imageBuildTag
  type: string

stages:
- stage: ${{ parameters.region }}_${{ parameters.env }}
  displayName: ${{ parameters.region }}_${{ parameters.env }}
  variables: 
    - template: ../../Common/Templates/variables/reg-env.yml 
      parameters:
        region: ${{ parameters.region }}
        env: ${{ parameters.env }}  
    - template: variables/reg-env.yml 
      parameters:
        region: ${{ parameters.region }}
        env: ${{ parameters.env }}  
  dependsOn: ${{ parameters.dependsOn }}
  pool:
    vmImage: ubuntu-latest 
  jobs:
  - deployment: Image
    displayName: Build and Push Image
    condition: and(succeeded(), eq('${{ parameters.imageBuild }}', 'true'))
    # for security reasons all environments must be provisioned by authorised person in advance
    environment: ${{ parameters.region }}_${{ parameters.env }}
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
            clean: true   
          - task: Docker@2
            displayName: Build Image
            inputs:
              command: build
              repository: $(imageName)
              dockerfile: '$(Build.SourcesDirectory)/AksWorkloadIdentitySample.Api/Dockerfile'
              buildContext: '$(Build.SourcesDirectory)'
              tags: ${{ parameters.imageBuildTag }}

          - task: AzureCLI@2
            displayName: 'Push Image'
            inputs:
              azureSubscription: ${{ parameters.svcConnAzureRm}}
              scriptType: 'pscore'
              scriptLocation: 'inlineScript'
              inlineScript: |
                az acr login --name $(acrName)
                docker tag $(imageName):${{ parameters.imageBuildTag }} $(acrName).azurecr.io/$(imageName):${{ parameters.imageBuildTag }}
                docker push $(acrName).azurecr.io/$(imageName):${{ parameters.imageBuildTag }}

  - deployment: Deploy    
    displayName: Deploy Application
    environment: ${{ parameters.region }}_${{ parameters.env }}
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
            clean: true   
          - template:  ../../Common/Templates/stageTenantsVarStep.yml        
            parameters:
              tenants: ${{ parameters.tenants }}
              region: ${{ parameters.region }}
              env: ${{ parameters.env }}                   
          - task: AzureCLI@2
            displayName: 'Set AKS Workload Identity ClientId Var'
            inputs:
              azureSubscription: ${{ parameters.svcConnAzureRm}}
              scriptType: 'pscore'
              scriptLocation: 'inlineScript'
              inlineScript: |
                $aksWorkloadIdentityClientId = (az identity show --resource-group $(rgName) --name $(aksWorkloadIdentityName) --query 'clientId' -otsv)
                Write-Host "##vso[task.setvariable variable=aksWorkloadIdentityClientId;]$aksWorkloadIdentityClientId"
          - task: replacetokens@5
            displayName: 'Replace tokens with variables'
            inputs:
              targetFiles: |
                Devops/App/Helm/**/Chart.yaml
                Devops/App/Helm/**/values.yaml
              encoding: 'auto'
              tokenPattern: 'default'
              writeBOM: true
              actionOnMissing: 'warn'
              keepToken: false
              actionOnNoFiles: 'warn'
              enableTransforms: false
              enableRecursion: false
              useLegacyPattern: false
              enableTelemetry: true   
              verbosity: 'detailed'  
          - task: HelmDeploy@0
            displayName: 'Deploy Shared App Components'
            condition: eq(1, 2)
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscription: ${{ parameters.svcConnAzureRm}}
              azureResourceGroup: $(rgName)
              kubernetesCluster: $(aksName)
              namespace: $(aksNamespace)
              command: 'upgrade'
              chartType: 'FilePath'
              chartPath: '$(System.DefaultWorkingDirectory)/Devops/App/Helm/aks-sample-shared'
              releaseName: $(webapiSharedReleaseName)
              arguments: '--debug --atomic --reset-values'        
          - ${{ each ring in parameters.rings }}:
            - ${{ if and(eq(ring.region,parameters.region),eq(ring.env,parameters.env)) }}: 
              - task: HelmDeploy@0
                displayName: 'Deploy version ${{ ring.version }} to ${{ ring.name }} ring'
                inputs:
                  connectionType: 'Azure Resource Manager'
                  azureSubscription: ${{ parameters.svcConnAzureRm}}
                  azureResourceGroup: $(rgName)
                  kubernetesCluster: $(aksName)
                  namespace: $(aksNamespace)
                  command: 'upgrade'
                  chartType: 'FilePath'
                  chartPath: '$(System.DefaultWorkingDirectory)/Devops/App/Helm/aks-sample-deploy'
                  releaseName: $(webapiReleaseName)-${{ ring.name }}
                  overrideValues: 'appVersion=${{ ring.version }}'
                  arguments: '--debug --atomic --reset-values'