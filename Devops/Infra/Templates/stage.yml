parameters:
- name: svcConnAzureRm
  type: string
- name: region
  type: string
- name: env
  type: string
- name: dependsOn  
  type: object

stages:
- stage: ${{ parameters.region }}_${{ parameters.env }}
  displayName: ${{ parameters.region }}_${{ parameters.env }}
  variables: 
    - template: ../../Common/Templates/variables/reg-env.yml 
      parameters:
        region: ${{ parameters.region }}
        env: ${{ parameters.env }}  
    - template: variables/reg-env.yml 
      parameters:
        region: ${{ parameters.region }}
        env: ${{ parameters.env }}
  dependsOn: ${{ parameters.dependsOn }}
  pool:
    vmImage: ubuntu-latest 
  jobs:
  - deployment: Infrastructure
    displayName: Ensure Shared Infra Resources
    # for security reasons all environments must be provisioned by authorised person in advance
    environment: ${{ parameters.region }}_${{ parameters.env }}
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
            clean: true              
          - task: AzureCLI@2
            displayName: 'Enable Workload Identity Preview'
            condition: eq(1,2)
            inputs:
              azureSubscription: ${{ parameters.svcConnAzureRm}}
              scriptType: 'pscore'
              scriptLocation: 'inlineScript'
              inlineScript: |
                az extension add --name aks-preview
                az feature register --namespace "Microsoft.ContainerService" --name "EnableWorkloadIdentityPreview"
                az provider register --namespace Microsoft.ContainerService
          - task: AzureCLI@2
            displayName: 'Ensure Terraform State Storage Account and Container'
            inputs:
              azureSubscription: ${{ parameters.svcConnAzureRm}}
              scriptType: 'pscore'
              scriptLocation: 'inlineScript'
              inlineScript: |
                az group create --location $(location) --name $(tfStateResourceGroup)
                az storage account create -n $(tfStateStorageAccount) -g $(tfStateResourceGroup) -l $(location) --sku Standard_LRS --encryption-services blob
                az storage container create -n $(tfStateContainerName) --account-name $(tfStateStorageAccount) -g $(tfStateResourceGroup)
          - task: replacetokens@5
            displayName: 'Replace tokens with variables'
            inputs:
              targetFiles: |
                Devops/Infra/Terraform/variables.tf
              encoding: 'auto'
              tokenPattern: 'default'
              writeBOM: true
              actionOnMissing: 'warn'
              keepToken: false
              actionOnNoFiles: 'warn'
              enableTransforms: false
              enableRecursion: false
              useLegacyPattern: false
              enableTelemetry: true   
              verbosity: 'detailed'   
          - task: TerraformTaskV3@3
            displayName: Terraform Ensure Workspace 
            inputs:
              provider: 'azurerm'
              environmentServiceNameAzureRM: ${{ parameters.svcConnAzureRm}}
              backendServiceArm: ${{ parameters.svcConnAzureRm}}
              command: 'custom'
              customCommmand: 'workspace new $(tfWorkspaceName)'
              backendAzureRmResourceGroupName: $(tfStateResourceGroup)
              backendAzureRmStorageAccountName: $(tfStateStorageAccount)
              backendAzureRmContainerName: $(tfStateContainerName)
              backendAzureRmKey: $(tfStateFileName)    
          - task: TerraformTaskV3@3
            displayName: Terraform Set Workspace 
            inputs:
              provider: 'azurerm'
              environmentServiceNameAzureRM: ${{ parameters.svcConnAzureRm}}
              command: 'custom'
              customCommmand: 'workspace select $(tfWorkspaceName)'
              backendAzureRmResourceGroupName: $(tfStateResourceGroup)
              backendAzureRmStorageAccountName: $(tfStateStorageAccount)
              backendAzureRmContainerName: $(tfStateContainerName)
              backendAzureRmKey: $(tfStateFileName)                             
          - task: TerraformTaskV3@3
            displayName: Terraform Init
            inputs:
              provider: 'azurerm'
              backendServiceArm: ${{ parameters.svcConnAzureRm}}
              command: 'init'
              workingDirectory: '$(System.DefaultWorkingDirectory)/Devops/Infra/Terraform'
              backendAzureRmResourceGroupName: $(tfStateResourceGroup)
              backendAzureRmStorageAccountName: $(tfStateStorageAccount)
              backendAzureRmContainerName: $(tfStateContainerName)
              backendAzureRmKey: $(tfStateFileName)                               
          - task: TerraformTaskV3@3
            displayName: Terraform Apply
            inputs:
              provider: 'azurerm'
              environmentServiceNameAzureRM: ${{ parameters.svcConnAzureRm}}
              command: 'apply'
              workingDirectory: '$(System.DefaultWorkingDirectory)/Devops/Infra/Terraform'
              commandOptions: '--auto-approve'
              backendAzureRmResourceGroupName: $(tfStateResourceGroup)
              backendAzureRmStorageAccountName: $(tfStateStorageAccount)
              backendAzureRmContainerName: $(tfStateContainerName)
              backendAzureRmKey: $(tfStateFileName)
  - deployment: InfrastructureApps    
    displayName: Deploy Shared Infra Apps
    dependsOn: Infrastructure
    environment: ${{ parameters.region }}_${{ parameters.env }}
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
            clean: true       
          - task: replacetokens@5
            displayName: 'Replace tokens with variables'
            inputs:
              targetFiles: |
                Devops/Infra/Helm/**/Chart.yaml
                Devops/Infra/Helm/**/values.yaml
              encoding: 'auto'
              tokenPattern: 'default'
              writeBOM: true
              actionOnMissing: 'warn'
              keepToken: false
              actionOnNoFiles: 'warn'
              enableTransforms: false
              enableRecursion: false
              useLegacyPattern: false
              enableTelemetry: true   
              verbosity: 'detailed'
          - task: HelmDeploy@0
            displayName: 'Deploy Traefik'      
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscription: ${{ parameters.svcConnAzureRm}}
              azureResourceGroup: $(rgName)
              kubernetesCluster: $(aksName)
              namespace: $(traefikAksNamespace)
              command: 'upgrade'
              chartType: 'FilePath'
              chartPath: '$(System.DefaultWorkingDirectory)/Devops/Infra/Helm/traefik'
              releaseName: $(traefikReleaseName)
              arguments: '--debug --atomic --reset-values --create-namespace'