name: $(Date:yyyyMMdd)$(Rev:.r)_${{ parameters.region }}_${{ parameters.env }}

trigger: none

resources:
- repo: self

parameters:
- name: region
  displayName: 'Region'
  type: string
  values:
  - au1
  default: au1
- name: env
  displayName: 'Environment'
  type: string
  values:
  - dev
  default: dev  
- name: tenants
  displayName: 'Tenants'
  type: object
  default: 
    - tenant1
    - tenant2
- name: destroy
  displayName: 'Destroy Infra (Before Apply)'
  type: boolean
  default: false
- name: apply
  displayName: 'Apply Infra'
  type: boolean
  default: true

variables:
- template: ../../Common/Templates/variables.yml  
  parameters:
      tenants: ${{ parameters.tenants }}
      region: ${{ parameters.region }}
      env: ${{ parameters.env }}
- template: ../Templates/variables.yml
  parameters:
    region: ${{ parameters.region }}
    env: ${{ parameters.env }}

stages:
- stage: Infrastructure
  displayName: Ensure Infrastructure
  jobs:
  - job: Infrastructure
    displayName: Ensure Azure Resources
    pool:
      vmImage: ubuntu-latest
    steps:    
    - task: AzureCLI@2
      displayName: 'Enable Workload Identity Preview Feature'
      condition: eq(1,2)
      inputs:
        azureSubscription: $(svcConnAzureRm)
        scriptType: 'pscore'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az extension add --name aks-preview
          az feature register --namespace "Microsoft.ContainerService" --name "EnableWorkloadIdentityPreview"
          az provider register --namespace Microsoft.ContainerService
    - task: AzureCLI@2
      displayName: 'Ensure Build Agent Access to Resources'
      inputs:
        azureSubscription: $(svcConnAzureRm)
        scriptType: bash
        scriptLocation: 'inlineScript'
        inlineScript: |
          build_agent_ip=$(curl ifconfig.co)
          az sql server firewall-rule create -g $(rgName) --name "$(sqlFirewallRuleBuildAgentName)-pipeline" --server $(sqlServerName) --start-ip-address $build_agent_ip --end-ip-address $build_agent_ip
    - task: AzureCLI@2
      displayName: 'Ensure Terraform State Storage Account and Container'
      condition: eq(1,2)
      inputs:
        azureSubscription: $(svcConnAzureRm)
        scriptType: 'pscore'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az group create --location $(location) --name $(tfStateResourceGroup)
          az storage account create -n $(tfStateStorageAccount) -g $(tfStateResourceGroup) -l $(location) --sku Standard_LRS --encryption-services blob
          az storage container create -n $(tfStateContainerName) --account-name $(tfStateStorageAccount) -g $(tfStateResourceGroup)
    - task: replacetokens@5
      displayName: 'Replace tokens with variables'
      inputs:
        targetFiles: |
          **/variables.tf
        encoding: 'auto'
        tokenPattern: 'default'
        writeBOM: true
        actionOnMissing: 'warn'
        keepToken: false
        actionOnNoFiles: 'warn'
        enableTransforms: false
        enableRecursion: false
        useLegacyPattern: false
        enableTelemetry: true   
        verbosity: 'detailed'   
    - task: TerraformTaskV3@3
      displayName: Terraform Init 
      inputs:
        provider: 'azurerm'
        backendServiceArm: $(svcConnAzureRm)
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/Devops/Infra/Terraform'
        backendAzureRmResourceGroupName: $(tfStateResourceGroup)
        backendAzureRmStorageAccountName: $(tfStateStorageAccount)
        backendAzureRmContainerName: $(tfStateContainerName)
        backendAzureRmKey: $(tfStateFileName)
    - task: TerraformTaskV3@3
      displayName: Terraform Destroy
      condition: and(succeeded(), eq('${{ parameters.destroy }}', 'true'))
      inputs:
        provider: 'azurerm'
        environmentServiceNameAzureRM: $(svcConnAzureRm)
        command: 'destroy'
        workingDirectory: '$(System.DefaultWorkingDirectory)/Devops/Infra/Terraform'
        commandOptions: 
          --auto-approve
        backendAzureRmResourceGroupName: $(tfStateResourceGroup)
        backendAzureRmStorageAccountName: $(tfStateStorageAccount)
        backendAzureRmContainerName: $(tfStateContainerName)
        backendAzureRmKey: $(tfStateFileName)        
    - task: TerraformTaskV3@3
      displayName: Terraform Apply
      condition: and(succeeded(), eq('${{ parameters.apply }}', 'true'))
      inputs:
        provider: 'azurerm'
        environmentServiceNameAzureRM: $(svcConnAzureRm)
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/Devops/Infra/Terraform'
        commandOptions: 
          --auto-approve
        backendAzureRmResourceGroupName: $(tfStateResourceGroup)
        backendAzureRmStorageAccountName: $(tfStateStorageAccount)
        backendAzureRmContainerName: $(tfStateContainerName)
        backendAzureRmKey: $(tfStateFileName)