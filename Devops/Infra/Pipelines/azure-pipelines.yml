# 1. Ensure Infrastructure

trigger: none

resources:
- repo: self

parameters:
- name: appName
  displayName: App Name (Up to 12 alphanumeric chars)
  type: string
  default: 'aksdemo'
- name: tenants
  displayName: 'Tenant List'
  type: object
  default: 
    - tenant1
    - tenant2

variables:
  appName: ${{ parameters.appName }}
  location: 'australiaeast'
  svcConnAzureRm: 'Keith Patton - VS Professional Sub'
  uniqueSuffix: 'qpe'
  acrName: 'acr$(appName)$(uniqueSuffix)'
  rgName: 'rg-$(appName)'
  rgAksNodesName: 'rg-k8s-$(appName)'
  aksName: 'aks-$(appName)'
  aksWorkloadIdentityServiceAccountName: 'sa-workload-identity-$(appName)'
  aksNamespace: 'default'
  aksFederatedIdentityName: 'fic-$(aksName)'
  aksWorkloadIdentityName: 'aks-$(appName)'
  aksNodeCount: 1
  aksVmSize: 'Standard_B2s'
  kvName: 'kv-$(appName)-$(uniqueSuffix)'
  
  tfStateResourceGroup: 'rg-terraform'
  tfStateStorageAccount: 'terraformstateakssample'
  tfStateContainerName: 'tfstate'
  tfStateFileName: 'terraform.tfstate'

stages:
- stage: Infrastructure
  displayName: Ensure Infrastructure
  jobs:
  - job: Infrastructure
    displayName: Ensure Azure Resources
    pool:
      vmImage: ubuntu-latest
    steps:    
    - task: AzureCLI@2
      displayName: 'Enable Workload Identity Preview Feature'
      inputs:
        azureSubscription: $(svcConnAzureRm)
        scriptType: 'pscore'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az extension add --name aks-preview
          az feature register --namespace "Microsoft.ContainerService" --name "EnableWorkloadIdentityPreview"
          az provider register --namespace Microsoft.ContainerService
    - task: AzureCLI@2
      displayName: 'Ensure Terraform State Storage Account and Container'
      inputs:
        azureSubscription: $(svcConnAzureRm)
        scriptType: 'pscore'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az group create --location $(location) --name $(tfStateResourceGroup)
          az storage account create -n $(tfStateStorageAccount) -g $(tfStateResourceGroup) -l $(location) --sku Standard_LRS
          az storage container create -n $(tfStateContainerName) --account-name $(tfStateStorageAccount) -g $(tfStateResourceGroup)
    - task: replacetokens@5
      displayName: 'Replace tokens with variables'
      inputs:
        targetFiles: |
          **/variables.tf
        encoding: 'auto'
        tokenPattern: 'default'
        writeBOM: true
        actionOnMissing: 'warn'
        keepToken: false
        actionOnNoFiles: 'warn'
        enableTransforms: false
        enableRecursion: false
        useLegacyPattern: false
        enableTelemetry: true   
        verbosity: 'detailed'   
    - task: TerraformTaskV3@3
      displayName: Terraform Init 
      inputs:
        provider: 'azurerm'
        backendServiceArm: $(svcConnAzureRm)
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/Devops/Infra/Terraform'
        backendAzureRmResourceGroupName: $(tfStateResourceGroup)
        backendAzureRmStorageAccountName: $(tfStateStorageAccount)
        backendAzureRmContainerName: $(tfStateContainerName)
        backendAzureRmKey: $(tfStateFileName)
    - task: TerraformTaskV3@3
      displayName: Terraform Apply
      inputs:
        provider: 'azurerm'
        environmentServiceNameAzureRM: $(svcConnAzureRm)
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/Devops/Infra/Terraform'
        commandOptions: 
          --auto-approve
        backendAzureRmResourceGroupName: $(tfStateResourceGroup)
        backendAzureRmStorageAccountName: $(tfStateStorageAccount)
        backendAzureRmContainerName: $(tfStateContainerName)
        backendAzureRmKey: $(tfStateFileName)