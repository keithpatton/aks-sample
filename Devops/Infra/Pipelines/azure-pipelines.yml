name: $(Date:yyyyMMdd)$(Rev:.r)_${{ parameters.region }}_${{ parameters.env }}

trigger: none

resources:
- repo: self

parameters:
- name: region
  displayName: 'Region'
  type: string
  values:
  - au1
  default: au1
- name: env
  displayName: 'Environment'
  type: string
  values:
  - dev
  default: dev  
- name: tenants
  displayName: 'Tenants'
  type: object
  default:
    - name: tenant1
    - name: tenant2
- name: destroy
  displayName: 'Destroy Infra (Before Apply)'
  type: boolean
  default: false
- name: apply
  displayName: 'Apply Infra'
  type: boolean
  default: true

variables:
- template: ../../Common/Templates/variables.yml  
  parameters:
      tenants: ${{ parameters.tenants }}
      region: ${{ parameters.region }}
      env: ${{ parameters.env }}
- template: ../Templates/variables.yml
  parameters:
    region: ${{ parameters.region }}
    env: ${{ parameters.env }}

- name: region
  value: ${{ parameters.region }}
- name: env
  value: ${{ parameters.env }}

stages:
- stage: au1-dev
  condition: and(eq(variables['region'], 'au1'), eq(variables['environment'], 'dev'))
  displayName: au1-dev
  pool:
    vmImage: ubuntu-latest 
  jobs:
    - deployment: Infrastructure
      displayName: Ensure Azure Resources
      environment: au1-dev
      strategy:
        runOnce:
          deploy:
            steps:
            - task: AzureCLI@2
              displayName: 'Enable Workload Identity Preview Feature'
              condition: eq(1,2)
              inputs:
                azureSubscription: $(svcConnAzureRm)
                scriptType: 'pscore'
                scriptLocation: 'inlineScript'
                inlineScript: |
                  az extension add --name aks-preview
                  az feature register --namespace "Microsoft.ContainerService" --name "EnableWorkloadIdentityPreview"
                  az provider register --namespace Microsoft.ContainerService
            - task: AzureCLI@2
              displayName: 'Ensure Build Agent Access'
              continueOnError: true
              inputs:
                azureSubscription: $(svcConnAzureRm)
                addSpnToEnvironment: true
                scriptType: bash
                scriptLocation: 'inlineScript'
                inlineScript: |
                  build_agent_ip=$(curl https://ipv4.icanhazip.com/)
                  az sql server firewall-rule create -g $(rgName) --name "$(sqlFirewallRuleBuildAgentName)-pipeline" --server $(sqlServerName) --start-ip-address $build_agent_ip --end-ip-address $build_agent_ip
                  printenv
            - task: AzureCLI@2
              displayName: 'Ensure Terraform State Storage Account and Container'
              condition: eq(1,2)
              inputs:
                azureSubscription: $(svcConnAzureRm)
                scriptType: 'pscore'
                scriptLocation: 'inlineScript'
                inlineScript: |
                  az group create --location $(location) --name $(tfStateResourceGroup)
                  az storage account create -n $(tfStateStorageAccount) -g $(tfStateResourceGroup) -l $(location) --sku Standard_LRS --encryption-services blob
                  az storage container create -n $(tfStateContainerName) --account-name $(tfStateStorageAccount) -g $(tfStateResourceGroup)
            - task: replacetokens@5
              displayName: 'Replace tokens with variables'
              inputs:
                targetFiles: |
                  **/variables.tf
                encoding: 'auto'
                tokenPattern: 'default'
                writeBOM: true
                actionOnMissing: 'warn'
                keepToken: false
                actionOnNoFiles: 'warn'
                enableTransforms: false
                enableRecursion: false
                useLegacyPattern: false
                enableTelemetry: true   
                verbosity: 'detailed'   
            - task: TerraformTaskV3@3
              displayName: Terraform Init 
              inputs:
                provider: 'azurerm'
                backendServiceArm: $(svcConnAzureRm)
                command: 'init'
                workingDirectory: '$(System.DefaultWorkingDirectory)/Devops/Infra/Terraform'
                backendAzureRmResourceGroupName: $(tfStateResourceGroup)
                backendAzureRmStorageAccountName: $(tfStateStorageAccount)
                backendAzureRmContainerName: $(tfStateContainerName)
                backendAzureRmKey: $(tfStateFileName)
            - task: TerraformTaskV3@3
              displayName: Terraform Destroy
              condition: and(succeeded(), eq('${{ parameters.destroy }}', 'true'))
              inputs:
                provider: 'azurerm'
                environmentServiceNameAzureRM: $(svcConnAzureRm)
                command: 'destroy'
                workingDirectory: '$(System.DefaultWorkingDirectory)/Devops/Infra/Terraform'
                commandOptions: 
                  --auto-approve
                backendAzureRmResourceGroupName: $(tfStateResourceGroup)
                backendAzureRmStorageAccountName: $(tfStateStorageAccount)
                backendAzureRmContainerName: $(tfStateContainerName)
                backendAzureRmKey: $(tfStateFileName)        
            - task: TerraformTaskV3@3
              displayName: Terraform Apply
              condition: and(succeeded(), eq('${{ parameters.apply }}', 'true'))
              inputs:
                provider: 'azurerm'
                environmentServiceNameAzureRM: $(svcConnAzureRm)
                command: 'apply'
                workingDirectory: '$(System.DefaultWorkingDirectory)/Devops/Infra/Terraform'
                commandOptions: 
                  --auto-approve
                backendAzureRmResourceGroupName: $(tfStateResourceGroup)
                backendAzureRmStorageAccountName: $(tfStateStorageAccount)
                backendAzureRmContainerName: $(tfStateContainerName)
                backendAzureRmKey: $(tfStateFileName)
                backendAWSBucketName: 
   
    - deployment: InfrastructureApps    
      displayName: Deploy Infra Apps
      condition: and(succeeded(), eq('${{ parameters.apply }}', 'true'))
      environment: au1-dev
      strategy:
        runOnce:
          deploy:
            steps:
            - task: replacetokens@5
              displayName: 'Replace tokens with variables'
              inputs:
                targetFiles: |
                  Devops/Infra/Helm/**/Chart.yaml
                  Devops/Infra/Helm/**/values.yaml
                encoding: 'auto'
                tokenPattern: 'default'
                writeBOM: true
                actionOnMissing: 'warn'
                keepToken: false
                actionOnNoFiles: 'warn'
                enableTransforms: false
                enableRecursion: false
                useLegacyPattern: false
                enableTelemetry: true   
                verbosity: 'detailed'
            - task: HelmDeploy@0
              displayName: 'Deploy Traefik'
              
              inputs:
                connectionType: 'Azure Resource Manager'
                azureSubscription: $(svcConnAzureRm)
                azureResourceGroup: $(rgName)
                kubernetesCluster: $(aksName)
                namespace: $(aksNamespace)
                command: 'upgrade'
                chartType: 'FilePath'
                chartPath: '$(System.DefaultWorkingDirectory)/Devops/Infra/Helm/traefik'
                releaseName: $(traefikReleaseName)
                arguments: '--debug --atomic --reset-values'